# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/06_segmentation_00_specs.ipynb.

# %% auto 0
__all__ = ['SegmentationStrategy', 'SegmentationObject']

# %% ../../nbs/06_segmentation_00_specs.ipynb 2
from abc import abstractmethod
from typing import Dict


from ..core import ProcessingObject, ProcessingStrategy
from ..database import Database

# %% ../../nbs/06_segmentation_00_specs.ipynb 4
class SegmentationStrategy(ProcessingStrategy):
    
    """
    Extending the `ProcssingStrategy` base class for segmentation as processing subtype.
    Also adding another property that denotes the type of segmentation (i.e. instance or semantic).
    """
    
    @property
    def processing_type(self):
        return 'segmentation'
    
    @property
    @abstractmethod
    def segmentation_type(self):
        # Either "instance" or "semantic"
        pass

# %% ../../nbs/06_segmentation_00_specs.ipynb 5
class SegmentationObject(ProcessingObject):

    """
    Extending the `ProcessingObject` base class for segmentation as processing subtype.
    The clear_all_tmp_data() method allows to clear all chached results that might 
    accumulate for instance while using deepflash2.
    """
    
    @property
    def processing_type(self) -> str:
        return 'segmentation'


    def add_processing_specific_infos_to_updates(self, updates: Dict) -> Dict:
        return updates


    def clear_all_tmp_data(self) -> None:
        if all(self.database.file_infos['segmentation_completed']):
            for tmp_subdir_path in self.database.segmentation_tool_dir.iterdir():
                if tmp_subdir_path.is_dir() and tmp_subdir_path.name != 'trained_models':
                    shutil.rmtree(tmp_subdir_path)
