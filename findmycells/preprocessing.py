# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_microscopy_images.ipynb.

# %% auto 0
__all__ = ['MicroscopyImageReader']

# %% ../nbs/02_microscopy_images.ipynb 4
from abc import ABC, abstractmethod
import os
from pathlib import Path
import numpy as np
import pandas as pd
import czifile
from skimage.io import imread

# %% ../nbs/02_microscopy_images.ipynb 5
class MicroscopyImageReader(ABC):
    
    """
    Abstract base class that serves as interface to load different types of microscopy image filetypes.
    """

    @abstractmethod
    def read(self, 
             filepath: Path # filepath to the microscopy image file
            ) -> np.ndarray: # numpy array with the structure: [imaging-planes, rows, columns, imaging-channel], see docstring for examples
        """ 
        Abstract method that needs to be defined by the respective subclass
        Returns the microscopy image as np.ndarray with structure: [imaging-planes, rows, columns, imaging-channel] 
        For instance, the shape of the array of a RGB Zstack with 10 image planes and 1024x1024 pixels would look like:
        [10, 1024, 1024, 3]
        To improve re-usability of the same functions for all different kinds of input images, this structure will be used even if there is just a single plane. 
        For instance, the shape of the array of a grayscale 2D image with 1024 x 1024 pixels should look like this:
        [1, 1024, 1024, 1]
        """
        pass
